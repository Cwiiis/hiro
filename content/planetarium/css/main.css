/* All threed-class elements have preserve-3d; preserve-3d is NOT inherited.  (There's an open
 * discussion on w3-style about adding a new transform-style that is like preserve-3d but is
 * inherited.)
 *
 * position: absolute; and 0,0 is also set because we'll position these elements fully using
 * 3D transforms.  Their CSS position is irrelevant for us.  Without this, their CSS position
 * will come into play as well as their transform.
 *
 * When in fullscreen VR, the 0,0,0 position is at the center of the viewport and not the top
 * left.
 *
 * We don't modify the original transform-origin here (50% 50% 0), because that can be useful
 * for moving elements around by their center point.  But it could also be set to 0,0,0 to
 * make it completely clear exactly where/how 3D objects are moving.
 */
.threed {
  transform-style: preserve-3d;
  position: absolute;
  top: 0; left: 0;
}

.star {
  width: 2px;
  height: 2px;
  background-color: white;
  border-radius: 50%;
}

.highlighted .star-label{
  display: inline;
}

.star-label {
  display: none;
  color: white;
  font-size: 30px;
}

.polaris {
  width: 5px;
  height: 5px;
  transform: rotateY(0deg) rotateX(70deg) translate3d(0, 0, 500px) translate(-100px, -150px);
}

.polaris:after{
  margin-left: 20px;
  margin-top: 20px;
  content: "Polaris";
  font-size: 20px;
  color: white;
}

.moon {
  width: 60px;
  height: 60px;
  transform: rotateY(0deg) rotateX(30deg) translate3d(0, 0, 500px) translate(-100px, -150px) scaleX(-1);
  background-image: url('../images/moon.png');
  background-size: contain;
}

#ground {
  background-color: brown;
  border-radius: 50%;
  width: 1000px; height: 1000px;
  background-color: rgb(38, 37, 13);
  background-image: url('../images/grass.jpg');
  transform: translate(-500px, -500px) rotateX(90deg) translateZ(-200px);
}

@keyframes rotate {
  from {
    transform: rotateY(0deg);
  }
  to {
    transform: rotateY(360deg);
  }
}

.rotateSky {
  animation: 15s rotate linear infinite;
}